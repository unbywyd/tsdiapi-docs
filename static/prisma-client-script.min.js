"use strict";
var PrismaRestClientTest = (() => {
  // src/PrismaRestClient.ts
  var PrismaRestClient = class {
    constructor(config) {
      this.config = config;
    }
    setToken(token) {
      this.config.token = token;
    }
    setApiUrl(apiUrl) {
      this.config.apiUrl = apiUrl;
    }
    useClient() {
      return new Proxy({}, {
        get: (_, model) => {
          if (typeof model !== "string") {
            throw new Error("Only string models are supported");
          }
          return new Proxy({}, {
            get: (_2, method) => {
              if (typeof method !== "string") {
                throw new Error("Only string methods are supported");
              }
              return async (payload) => {
                const url = `${this.config.apiUrl}/${method}/${model}`;
                try {
                  const response = await fetch(url, {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      "Authorization": `Bearer ${this.config.token}`
                    },
                    body: JSON.stringify(payload)
                  });
                  if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || "API request failed");
                  }
                  return (await response.json())?.data;
                } catch (error) {
                  throw error;
                }
              };
            }
          });
        }
      });
    }
  };

  // src/test.ts
  document.addEventListener("DOMContentLoaded", () => {
    const instance = new PrismaRestClient({
      apiUrl: "http://localhost:3100/api/prisma/v1",
      token: ""
    });
    const client = instance.useClient();
    const apiUrlInput = document.getElementById("apiUrl");
    const tokenInput = document.getElementById("token");
    const modelInput = document.getElementById("model");
    const methodInput = document.getElementById("method");
    const payloadInput = document.getElementById("payload");
    const resultDiv = document.getElementById("result");
    const testButton = document.querySelector("button");
    apiUrlInput.value = "http://localhost:3100/api/prisma/v1";
    modelInput.value = "user";
    methodInput.value = "findMany";
    payloadInput.value = JSON.stringify({
      where: {},
      select: {
        id: true,
        email: true,
        name: true
      }
    }, null, 2);
    const loadingStyles = document.createElement("style");
    loadingStyles.textContent = `
        .loading {
            position: relative;
            pointer-events: none;
            opacity: 0.7;
        }
        .loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(loadingStyles);
    async function testQuery() {
      try {
        testButton.classList.add("loading");
        resultDiv.textContent = "Loading...";
        resultDiv.style.color = "inherit";
        const apiUrl = apiUrlInput.value;
        instance.setApiUrl(apiUrl);
        const token = tokenInput.value;
        const model = modelInput.value;
        const method = methodInput.value;
        const payload = payloadInput.value;
        instance.setToken(token);
        const result = await client[model][method](JSON.parse(payload));
        resultDiv.textContent = JSON.stringify(result, null, 2);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
        resultDiv.textContent = `Error: ${errorMessage}`;
        resultDiv.style.color = "red";
        console.error("Query error:", error);
      } finally {
        testButton.classList.remove("loading");
      }
    }
    testButton.addEventListener("click", testQuery);
    function validateJSON(input) {
      try {
        JSON.parse(input.value);
        input.style.borderColor = "";
      } catch (e) {
        input.style.borderColor = "red";
      }
    }
    payloadInput.addEventListener("input", () => validateJSON(payloadInput));
    document.addEventListener("keydown", (e) => {
      if (e.ctrlKey && e.key === "Enter") {
        testQuery();
      }
    });
  });
})();
